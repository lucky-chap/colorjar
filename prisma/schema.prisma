// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  generated     Generated[]
  extracted     Extracted[]
  custom        Custom[]
  gradient      Gradient[]
  bookmarks     Bookmark[]
  sessions      Session[]
}

model Generated {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String?
  author        User?    @relation(fields: [authorId], references: [id])
  type          String
  origin        String
  shades        String[]
  tints         String[]
}

model Extracted {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String?
  author        User?    @relation(fields: [authorId], references: [id])
  type          String?
  average       String?
  colors        String[]
}

model Custom {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String?
  author        User?    @relation(fields: [authorId], references: [id])
  type          String
  colors        String[]
}

model Gradient {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String?
  author        User?    @relation(fields: [authorId], references: [id])
  type          String
  colors        String[]
}

model Bookmark {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String?
  author        User?    @relation(fields: [authorId], references: [id])
  paletteId     String?
}

model VerificationToken {
  identifier    String
  token         String   @unique
  expires       DateTime
  @@unique([identifier, token])
}